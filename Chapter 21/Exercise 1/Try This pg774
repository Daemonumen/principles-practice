// -----------------------------------------------------------------------------
// https://lptcp.blogspot.com/
// 
/*
	Chapter 21 - Exercise 1

	Try This - Pg774
	Define a vector<Record>, initialise it with four records of your choice, and
	compute their total price using the functions above.

*/
// https://github.com/l-paz91/principles-practice/
// -----------------------------------------------------------------------------

//--INCLUDES--//
#include "std_lib_facilities.h"

#include <numeric>

//--GLOBALS--//

// -----------------------------------------------------------------------------

struct Record
{
	Record() : mUnitPrice(0.0), mUnitsSold(0) {}
	Record(double pPrice, int pNumSold) : mUnitPrice(pPrice), mUnitsSold(pNumSold) {}
	double mUnitPrice;
	int mUnitsSold;
};

// -----------------------------------------------------------------------------

double price(double v, const Record& r)
{
	return v + r.mUnitPrice * r.mUnitsSold;	// calculate price and accumulate
}

// -----------------------------------------------------------------------------


void f(const vector<Record>& vr)
{
	double total = std::accumulate(vr.begin(), vr.end(), 0.0, price);
	cout << "Total: " << total << endl;
}

// -----------------------------------------------------------------------------

void fct()
{
	vector<Record> vr{ Record{44.44, 2}, Record{23.10, 100}, Record{6.45, 0}, Record{900.71, 400} };
	f(vr);
}

// -----------------------------------------------------------------------------

int main()
{
	// done to keep an eye on memory tracking (it will always report as a leak if done in main)
	fct();

	keep_window_open();
	_CrtDumpMemoryLeaks();
	return 0;
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
