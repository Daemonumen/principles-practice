// -----------------------------------------------------------------------------
// https://lptcp.blogspot.com/
// Chapter 15 - Exercise 1
/*
	Here is another way of defining a factorial function:

	int fac(int n) { return n > 1 ? n *fac(n - 1) : 1; }  // factorial n!

	It will do fac(4) by first deciding that since 4 > 1 it must be 4 * fac(3),
	and that's obviously 4 * 3 * fac(2), which again is 4 * 3 *2 * fac(1), which
	is 4 * 3 * 2 * 1. Try to see that it works. A function that calls itself is
	said to be recursive. The alternative implementation in section 15.5 is called
	iterative bcause it iterates through the values (using while). Verify that
	the recursive fac() works and gives the same results as the iterative fac()
	by calculating the factorial of 0, 1, 2, 3, 4, up until and including 20.
	Which implementation of fac() do you prefer, and why?
*/
// -----------------------------------------------------------------------------

//--INCLUDES--//
#include <chrono>
#include "std_lib_facilities.h"

// -----------------------------------------------------------------------------

double facRecursive(int n)
{
	//if n is more than 1, return n * fac(n-1), else return 1
	return n > 1 ? n * facRecursive(n - 1) : 1;	
}

// -----------------------------------------------------------------------------

double facIterative(int n)
{
	double r = 1;
	while (n > 1)
	{
		r *= n;
		--n;
	}

	return r;
}

// -----------------------------------------------------------------------------

int main()
{
	cout << fixed;	// turn off scientific notation
	double result = 0;

	// test recursive ---------------------------------
	auto time1 = chrono::high_resolution_clock::now();
	for (int n = 0; n < 1000; ++n)
	{
		for (int i = 0; i < 21; ++i)
			result = facRecursive(i);
	}
	auto time2 = chrono::high_resolution_clock::now();

	auto duration = chrono::duration_cast<chrono::nanoseconds>(time2 - time1).count();
	double toMs = duration / 1000000.0f;
	cout << "Recursive: " << toMs << "ms" << endl;
	// end test recursive ---------------------------------

	// test iterative ---------------------------------
	time1 = chrono::high_resolution_clock::now();
	for (int n = 0; n < 1000; ++n)
	{
		for (int i = 0; i < 21; ++i)
			result = facRecursive(i);
	}
	time2 = chrono::high_resolution_clock::now();

	duration = chrono::duration_cast<chrono::nanoseconds>(time2 - time1).count();
	toMs = duration / 1000000.0f;
	cout << "Iterative: " << toMs << "ms" << endl;
	// test iterative ---------------------------------

	//print out results
	for (int i = 0; i < 21; ++i)
	{
		cout << "Recursive " << i << ": " << facRecursive(i) << endl;
		cout << "Iterative " << i << ": " << facIterative(i) << endl << endl;
	}
	
	_getch();
	return 0;
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
