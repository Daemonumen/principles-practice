// -----------------------------------------------------------------------------
// https://lptcp.blogspot.com/
// Chapter 15 - Exercise 5
/*
	"Animate" (as in section 15.5) the series 1-1/3+1/5-1/7+1/9-1/11+.... It is 
	known as Leibniz's series and converges to pi/4..
*/
// https://github.com/l-paz91/principles-practice/tree/master/Graphics%20Files
// -----------------------------------------------------------------------------

//--INCLUDES--//
#include "Simple_window.h"
#include "Graph.h"

using namespace Graph_lib;

// -----------------------------------------------------------------------------

double piDiv4(double x)
{
	return getpi() / 4;
}

// -----------------------------------------------------------------------------

double leibniz(double n)
{
	bool flipflop = true;
	double sum = 1.0f;
	double div = 3.0f;
	for (int i = 1; i <= n; ++i)
	{
		if (flipflop)
			sum -= 1 / div;
		else
			sum += 1 / div;
		div += 2;
		flipflop = !flipflop;
	}

	return sum;
}

// -----------------------------------------------------------------------------

int main()
{
	const int xmax = 600;
	const int ymax = 600;
	const int yorigin = ymax / 2;
	const int xorigin = xmax / 2;
	const Point origin{ double(xorigin), double(yorigin) };

	const int axisLength = 400;
	const int notches = 400 / 20;

	const double xscale = 20;
	const double yscale = 20;

	double rangeMin = -10;
	double rangeMax = 11;

	Simple_window win{ Point{100,100}, xmax, ymax, "Function Graphs - Exercise 5" };

	// -----------------------------------------------------------------------------
	
	Axis xaxis(Axis::x, Point(100, yorigin), axisLength, notches, "x");
	win.attach(xaxis);
	Axis yaxis(Axis::y, Point(xorigin, axisLength + 100), axisLength, notches, "y");
	win.attach(yaxis);

	// -----------------------------------------------------------------------------

	Function f_pidiv4{ piDiv4, rangeMin, rangeMax, origin, axisLength, xscale, yscale };
	f_pidiv4.set_color(Color::coral);
	Text tpidiv4(Point{ f_pidiv4.point(0).x - 40, f_pidiv4.point(0).y}, "Pi/4");
	tpidiv4.set_color(Color::coral);
	win.attach(f_pidiv4);
	win.attach(tpidiv4);

	// -----------------------------------------------------------------------------

	for (int j = 0; j < 50; ++j)
	{
		Function f_leibniz{ [j](double x) {return leibniz(j); },
			rangeMin, rangeMax, origin, axisLength, xscale, yscale };
		f_leibniz.set_color(Color::blue);
		Text tleibniz(Point{ f_leibniz.point(0).x - 50, f_leibniz.point(0).y }, "Leibniz");
		tleibniz.set_color(Color::blue);
		win.attach(f_leibniz);
		win.attach(tleibniz);
		win.wait_for_button();
		win.detach(f_leibniz);
		win.detach(tleibniz);
	}

	// -----------------------------------------------------------------------------

	win.wait_for_button();
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
