// -----------------------------------------------------------------------------
// https://lptcp.blogspot.com/
// 
/*
	Chapter 23 - Exercise 10

	Modify the table-checking program from section 23.9 to write a new table where 
	the rows with the same initial digit (indication the year: first grades start 
	with 1) are merged.

*/
// https://github.com/l-paz91/principles-practice/
// -----------------------------------------------------------------------------

//--INCLUDES--//
#include <map>
#include <regex>

#include "std_lib_facilities.h"

// -----------------------------------------------------------------------------

struct ClassSize
{
	ClassSize(int pBoys, int pGirls, int pTotal)
		: mBoys(pBoys)
		, mGirls(pGirls)
		, mTotal(pTotal)
	{}

	int mBoys;
	int mGirls;
	int mTotal;
};

// -----------------------------------------------------------------------------

void fct()
{
	// table files: https://github.com/l-paz91/principles-practice/tree/master/Chapter%2023/Exercise%209
	//ifstream inputFile{ "table.txt" };		// standard table
	//ifstream inputFile{ "table2.txt" };	// has new line after end of table
	ifstream inputFile{ "table3.txt" };	// has new lines in table and after

	// patterns
	regex header{ R"(^[\w ]+(	[\w ]+)*$)" };
	regex row{ R"(^[\w ]+(		\d+)( \d+)( \d+)$)" };

	// new merged file
	ofstream outputFile{ "tableMerged.txt" };
	
	// make sure the table has a header
	string line;
	int lineNum = 0;

	if (getline(inputFile, line))
	{
		smatch matches;
		if (!regex_match(line, matches, header))
		{
			error("No header.");
		}
		outputFile << line;
	}

	// column totals
	int boys = 0;
	int girls = 0;

	// map to store years to class size (keeps years as unique)
	map<int, ClassSize> yearsAndClassSize;

	while (getline(inputFile, line))
	{
		if(line.empty())
			continue;	// will skip to next line

		++lineNum;
		smatch matches;
		if (!regex_match(line, matches, row))
		{
			cerr << "Bad line: " << lineNum << endl;
		}

		if (inputFile.eof())
		{
			cout << " at eof()\n";
		}

		// check row
		int currBoy = from_string<int>(matches[1]);
		int currGirl = from_string<int>(matches[2]);
		int currTotal = from_string<int>(matches[3]);
		if (currBoy + currGirl != currTotal)
		{
			error("Bad row sum.\n");
		}

		if (matches[0] == "Aile klasser \t\t184 202 386")
		{
			if (currBoy != boys)
				error("Boys don't add up!\n");
			if (currGirl != girls)
				error("Girls don't add up!\n");

			if (!(inputFile >> ws).eof())
				error("Characters after total line");

			cout << "Expected totals: 184\t202\t386\n";
			cout << "Totals: " << boys << "\t" << girls << "\t" << boys + girls << endl;

			// end of table - create merged table output
			for (const auto& ref : yearsAndClassSize)
			{
				// this is horribly hacky but whatever - 34 is ascii code for R
				if (ref.first == 34)
				{
					outputFile << '\n' << "REST" << "\t\t" << ref.second.mBoys << " " << ref.second.mGirls << " " << ref.second.mTotal;
					break;
				}
				outputFile << '\n' << ref.first << "\t\t" << ref.second.mBoys << " " << ref.second.mGirls << " " << ref.second.mTotal;
			}
			outputFile << '\n' << matches[0];

			return;
		}

		// update totals
		boys += currBoy;
		girls += currGirl;
		int year = matches[0].first[0] - '0';
		
		auto search = yearsAndClassSize.find(year);
		if (search != yearsAndClassSize.end())
		{
			search->second.mBoys += currBoy;
			search->second.mGirls += currGirl;
			search->second.mTotal += currTotal;
		}
		else
		{
			yearsAndClassSize.insert(pair<int, ClassSize>(year, ClassSize(currBoy, currGirl, currTotal)));
		}
	}
}
// -----------------------------------------------------------------------------

int main()
{
	// done to keep an eye on memory tracking (it will always report as a leak if done in main)
	fct();

	cout << "\n";
	pressKeyToContinue();
	_CrtDumpMemoryLeaks();
	return 0;
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
